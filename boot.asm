%include "bios.h"
%include "fat.h"

	[BITS 16]
	[ORG BOOT_ENTRY + 64]

	JMP 0:CORRECTION
CORRECTION:
	MOV AX, CS
	MOV ES, AX
	MOV SS, AX
	MOV DS, AX
	MOV SP, BOOT_ENTRY
	MOV BYTE [DRIVE_NUM], DL

	MOV SI, ENTRYSTR
	CALL PRINT
	
	XOR AX, AX
	MOV AL, BYTE [NUM_FATS]
	MUL WORD [SECTORS_PER_FAT]
	MOV WORD [CLUSTER_START], AX
	MOV AX, WORD [NUM_ENTRIES]
	MOV BX, DIR_SIZE
	MUL BX
	DIV WORD [BYTES_PER_SECTOR]
	ADD AX, WORD [NUM_HIDDEN]
	ADD WORD [CLUSTER_START], AX
	
	;Just a test read to make sure that reading works
	MOV AX, 0
	MOV BX, 0x7E00
	CALL READSECTOR

	CLI
	HLT

;Assumes AX=LBA, ES:BX=BUFFER
READSECTOR:
	PUSHA
	CALL LBA2CHS
	MOV DL, BYTE [DRIVE_NUM]
	MOV AL, 1
	MOV CL, BYTE [SECTOR]
	MOV CH, BYTE [TRACK]
	MOV AH, READSECTOR_B
	MOV DH, BYTE [HEAD]
	INT DISK_SERVICE
	JNC READSUCCESS
	MOV SI, BADREADSTR	;Bad sector read, Hang the machine
	CALL PRINT
	CLI
	HLT
READSUCCESS:
	POPA
	RET

CLUSTER2LBA:
	DEC AX
	DEC AX
	MUL WORD [SECTORS_PER_CLUSTER]
	ADD AX, WORD [CLUSTER_START]
	RET

LBA2CHS:
	PUSHA
	XOR DX, DX
	DIV WORD [SECTORS_PER_TRACK]
	INC DL
	;Save sector referenced by the LBA
	MOV BYTE [SECTOR], DL
	XOR DX, DX
	DIV WORD [NUM_HEADS]
	;Save head from LBA
	MOV BYTE [HEAD], DL
	;Save track from LBA
	MOV BYTE [TRACK], AL
	POPA
	RET

PRINT:
	PUSHA
	MOV AH, PUTCHAR
PRINTLOOP:
	LODSB
	OR AL, AL
	JZ ENDPRINT
	INT TEXT_SERVICE
	JMP PRINTLOOP
ENDPRINT:
	POPA
	RET

ENTRYSTR:	DB "Dosile boot started.", 13, 10, 0
BADREADSTR:	DB "Fatal read error. Halting.", 13, 10, 0
TRACK:		DB 0
HEAD:		DB 0
SECTOR:		DB 0
CLUSTER_START:	DW 0

	TIMES 510 - 64 - ($ - $$) DB 0
	DW BOOT_SIGNATURE
